// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetrisksetC
Rcpp::List GetrisksetC(const Eigen::MatrixXd& cdata);
RcppExport SEXP _FastJM_GetrisksetC(SEXP cdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cdata(cdataSEXP);
    rcpp_result_gen = Rcpp::wrap(GetrisksetC(cdata));
    return rcpp_result_gen;
END_RCPP
}
// GetrisksetCSF
Rcpp::List GetrisksetCSF(const Eigen::MatrixXd& cdata);
RcppExport SEXP _FastJM_GetrisksetCSF(SEXP cdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cdata(cdataSEXP);
    rcpp_result_gen = Rcpp::wrap(GetrisksetCSF(cdata));
    return rcpp_result_gen;
END_RCPP
}
// MultVV
double MultVV(const Eigen::VectorXd& x, const Eigen::VectorXd& y);
RcppExport SEXP _FastJM_MultVV(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(MultVV(x, y));
    return rcpp_result_gen;
END_RCPP
}
// CumSum
Eigen::VectorXd CumSum(const Eigen::VectorXd& x);
RcppExport SEXP _FastJM_CumSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CumSum(x));
    return rcpp_result_gen;
END_RCPP
}
// MultVVoutprod
Eigen::MatrixXd MultVVoutprod(const Eigen::VectorXd& x);
RcppExport SEXP _FastJM_MultVVoutprod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MultVVoutprod(x));
    return rcpp_result_gen;
END_RCPP
}
// MultVV2outprod
Eigen::MatrixXd MultVV2outprod(const Eigen::VectorXd& x, const Eigen::VectorXd& y);
RcppExport SEXP _FastJM_MultVV2outprod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(MultVV2outprod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// MultVVinprod
double MultVVinprod(const Eigen::VectorXd& x);
RcppExport SEXP _FastJM_MultVVinprod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MultVVinprod(x));
    return rcpp_result_gen;
END_RCPP
}
// getdeterminant
double getdeterminant(const Eigen::MatrixXd& H);
RcppExport SEXP _FastJM_getdeterminant(SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(getdeterminant(H));
    return rcpp_result_gen;
END_RCPP
}
// CH
double CH(const Eigen::MatrixXd& H, double t);
RcppExport SEXP _FastJM_CH(SEXP HSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H(HSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(CH(H, t));
    return rcpp_result_gen;
END_RCPP
}
// HAZ
double HAZ(const Eigen::MatrixXd& H, double t);
RcppExport SEXP _FastJM_HAZ(SEXP HSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H(HSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(HAZ(H, t));
    return rcpp_result_gen;
END_RCPP
}
// MultMM
Eigen::MatrixXd MultMM(const Eigen::MatrixXd& x, const Eigen::MatrixXd& y);
RcppExport SEXP _FastJM_MultMM(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(MultMM(x, y));
    return rcpp_result_gen;
END_RCPP
}
// GetCIF1CR
double GetCIF1CR(const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const double s, const double u, const Eigen::VectorXd& bi);
RcppExport SEXP _FastJM_GetCIF1CR(SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP sSEXP, SEXP uSEXP, SEXP biSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type bi(biSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCIF1CR(gamma1, gamma2, alpha1, alpha2, X2, H01, H02, s, u, bi));
    return rcpp_result_gen;
END_RCPP
}
// GetCIF2CR
double GetCIF2CR(const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const double s, const double u, const Eigen::VectorXd& bi);
RcppExport SEXP _FastJM_GetCIF2CR(SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP sSEXP, SEXP uSEXP, SEXP biSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type bi(biSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCIF2CR(gamma1, gamma2, alpha1, alpha2, X2, H01, H02, s, u, bi));
    return rcpp_result_gen;
END_RCPP
}
// GetCIF1CRall
Eigen::VectorXd GetCIF1CRall(const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const double s, const Eigen::VectorXd& timecif, const Eigen::VectorXd& bi);
RcppExport SEXP _FastJM_GetCIF1CRall(SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP sSEXP, SEXP timecifSEXP, SEXP biSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type timecif(timecifSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type bi(biSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCIF1CRall(gamma1, gamma2, alpha1, alpha2, X2, H01, H02, s, timecif, bi));
    return rcpp_result_gen;
END_RCPP
}
// GetCIF2CRall
Eigen::VectorXd GetCIF2CRall(const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const double s, const Eigen::VectorXd& timecif, const Eigen::VectorXd& bi);
RcppExport SEXP _FastJM_GetCIF2CRall(SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP sSEXP, SEXP timecifSEXP, SEXP biSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type timecif(timecifSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type bi(biSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCIF2CRall(gamma1, gamma2, alpha1, alpha2, X2, H01, H02, s, timecif, bi));
    return rcpp_result_gen;
END_RCPP
}
// getBayes
Rcpp::List getBayes(const Eigen::VectorXd& beta, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS);
RcppExport SEXP _FastJM_getBayes(SEXP betaSEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP mdataSEXP, SEXP mdataSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    rcpp_result_gen = Rcpp::wrap(getBayes(beta, Sig, sigma, Z, X1, Y, mdata, mdataS));
    return rcpp_result_gen;
END_RCPP
}
// getCov
Rcpp::List getCov(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& FUNBS, const Eigen::MatrixXd& FUNEC, const Eigen::MatrixXd& FUNBEC, const Eigen::MatrixXd& FUNBSEC, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getCov(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP FUNBSSEXP, SEXP FUNECSEXP, SEXP FUNBECSEXP, SEXP FUNBSECSEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBS(FUNBSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNEC(FUNECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBEC(FUNBECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBSEC(FUNBSECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getCov(beta, gamma1, gamma2, alpha1, alpha2, H01, H02, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, FUNBS, FUNEC, FUNBEC, FUNBSEC, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getCovSF
Rcpp::List getCovSF(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& FUNBS, const Eigen::MatrixXd& FUNEC, const Eigen::MatrixXd& FUNBEC, const Eigen::MatrixXd& FUNBSEC, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getCovSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP H01SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP FUNBSSEXP, SEXP FUNECSEXP, SEXP FUNBECSEXP, SEXP FUNBSECSEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBS(FUNBSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNEC(FUNECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBEC(FUNBECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBSEC(FUNBSECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getCovSF(beta, gamma1, alpha1, H01, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, FUNBS, FUNEC, FUNBEC, FUNBSEC, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getECIF
Rcpp::List getECIF(const Eigen::VectorXd& beta, const double sigma, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const double CH01, const double CH02, const double s, const double u, const Eigen::VectorXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getECIF(SEXP betaSEXP, SEXP sigmaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CH01SEXP, SEXP CH02SEXP, SEXP sSEXP, SEXP uSEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type CH01(CH01SEXP);
    Rcpp::traits::input_parameter< const double >::type CH02(CH02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getECIF(beta, sigma, gamma1, gamma2, alpha1, alpha2, Sig, Z, X1, Y, X2, H01, H02, xsmatrix, wsmatrix, CH01, CH02, s, u, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getECIFall
Rcpp::List getECIFall(const Eigen::VectorXd& beta, const double sigma, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::VectorXd& X2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const double CH01, const double CH02, const double s, const Eigen::VectorXd& timecif1, const Eigen::VectorXd& timecif2, const Eigen::VectorXd& Posmean, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getECIFall(SEXP betaSEXP, SEXP sigmaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CH01SEXP, SEXP CH02SEXP, SEXP sSEXP, SEXP timecif1SEXP, SEXP timecif2SEXP, SEXP PosmeanSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type CH01(CH01SEXP);
    Rcpp::traits::input_parameter< const double >::type CH02(CH02SEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type timecif1(timecif1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type timecif2(timecif2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Posmean(PosmeanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getECIFall(beta, sigma, gamma1, gamma2, alpha1, alpha2, Sig, Z, X1, Y, X2, H01, H02, xsmatrix, wsmatrix, CH01, CH02, s, timecif1, timecif2, Posmean, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getECpseudo
Rcpp::List getECpseudo(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getECpseudo(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getECpseudo(beta, gamma1, gamma2, alpha1, alpha2, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getECpseudoSF
Rcpp::List getECpseudoSF(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& HAZ01, const Eigen::MatrixXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getECpseudoSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getECpseudoSF(beta, gamma1, alpha1, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, HAZ01, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getECstandard
Rcpp::List getECstandard(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02);
RcppExport SEXP _FastJM_getECstandard(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    rcpp_result_gen = Rcpp::wrap(getECstandard(beta, gamma1, gamma2, alpha1, alpha2, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02));
    return rcpp_result_gen;
END_RCPP
}
// getECstandardSF
Rcpp::List getECstandardSF(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& HAZ01);
RcppExport SEXP _FastJM_getECstandardSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    rcpp_result_gen = Rcpp::wrap(getECstandardSF(beta, gamma1, alpha1, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, HAZ01));
    return rcpp_result_gen;
END_RCPP
}
// getES
double getES(const Eigen::VectorXd& beta, const double sigma, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::VectorXd& X2, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const double CH0s, const double CH0u, const Eigen::VectorXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getES(SEXP betaSEXP, SEXP sigmaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CH0sSEXP, SEXP CH0uSEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type CH0s(CH0sSEXP);
    Rcpp::traits::input_parameter< const double >::type CH0u(CH0uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getES(beta, sigma, gamma1, alpha1, Sig, Z, X1, Y, X2, xsmatrix, wsmatrix, CH0s, CH0u, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getHazard
int getHazard(const Eigen::VectorXd& CumuH01, const Eigen::VectorXd& CumuH02, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, Eigen::Map<Eigen::VectorXd>& CUH01, Eigen::Map<Eigen::VectorXd>& CUH02, Eigen::Map<Eigen::VectorXd>& HAZ01, Eigen::Map<Eigen::VectorXd>& HAZ02);
RcppExport SEXP _FastJM_getHazard(SEXP CumuH01SEXP, SEXP CumuH02SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CumuH01(CumuH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CumuH02(CumuH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type HAZ02(HAZ02SEXP);
    rcpp_result_gen = Rcpp::wrap(getHazard(CumuH01, CumuH02, survtime, cmprsk, H01, H02, CUH01, CUH02, HAZ01, HAZ02));
    return rcpp_result_gen;
END_RCPP
}
// getHazardSF
int getHazardSF(const Eigen::VectorXd& CumuH01, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::MatrixXd& H01, Eigen::Map<Eigen::VectorXd>& CUH01, Eigen::Map<Eigen::VectorXd>& HAZ01);
RcppExport SEXP _FastJM_getHazardSF(SEXP CumuH01SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP H01SEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CumuH01(CumuH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type HAZ01(HAZ01SEXP);
    rcpp_result_gen = Rcpp::wrap(getHazardSF(CumuH01, survtime, cmprsk, H01, CUH01, HAZ01));
    return rcpp_result_gen;
END_RCPP
}
// getMC
Rcpp::List getMC(Eigen::VectorXd& beta, Eigen::VectorXd& gamma1, Eigen::VectorXd& gamma2, Eigen::VectorXd& alpha1, Eigen::VectorXd& alpha2, Eigen::MatrixXd& H01, Eigen::MatrixXd& H02, Eigen::MatrixXd& Sig, double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& FUNBS, const Eigen::MatrixXd& FUNEC, const Eigen::MatrixXd& FUNBEC, const Eigen::MatrixXd& FUNBSEC, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getMC(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP FUNBSSEXP, SEXP FUNECSEXP, SEXP FUNBECSEXP, SEXP FUNBSECSEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBS(FUNBSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNEC(FUNECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBEC(FUNBECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBSEC(FUNBSECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getMC(beta, gamma1, gamma2, alpha1, alpha2, H01, H02, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, FUNBS, FUNEC, FUNBEC, FUNBSEC, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getMCSF
Rcpp::List getMCSF(Eigen::VectorXd& beta, Eigen::VectorXd& gamma1, Eigen::VectorXd& alpha1, Eigen::MatrixXd& H01, Eigen::MatrixXd& Sig, double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& FUNBS, const Eigen::MatrixXd& FUNEC, const Eigen::MatrixXd& FUNBEC, const Eigen::MatrixXd& FUNBSEC, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getMCSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP H01SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP FUNBSSEXP, SEXP FUNECSEXP, SEXP FUNBECSEXP, SEXP FUNBSECSEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBS(FUNBSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNEC(FUNECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBEC(FUNBECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNBSEC(FUNBSECSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getMCSF(beta, gamma1, alpha1, H01, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, FUNBS, FUNEC, FUNBEC, FUNBSEC, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getMNA
Rcpp::List getMNA(Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList, Rcpp::List sigmaList, Rcpp::List sigmaiList, Eigen::VectorXd weight, Eigen::VectorXd absc, Eigen::MatrixXd H01, Eigen::MatrixXd H02, Eigen::VectorXd& survtime, Eigen::VectorXd cmprsk, Eigen::VectorXd& gamma1, Eigen::VectorXd& gamma2, Rcpp::List alphaList, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Sig, Rcpp::List betaList);
RcppExport SEXP _FastJM_getMNA(SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP, SEXP sigmaListSEXP, SEXP sigmaiListSEXP, SEXP weightSEXP, SEXP abscSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alphaListSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP SigSEXP, SEXP betaListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaList(sigmaListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type absc(abscSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alphaList(alphaListSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type betaList(betaListSEXP);
    rcpp_result_gen = Rcpp::wrap(getMNA(XList, YList, ZList, W, mdata, mdataSList, bList, sigmaList, sigmaiList, weight, absc, H01, H02, survtime, cmprsk, gamma1, gamma2, alphaList, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02, Sig, betaList));
    return rcpp_result_gen;
END_RCPP
}
// getMaGH
Rcpp::List getMaGH(Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList, Rcpp::List sigmaList, Rcpp::List sigmaiList, Eigen::VectorXd weight, Eigen::VectorXd absc, Eigen::MatrixXd H01, Eigen::MatrixXd H02, Eigen::VectorXd& survtime, Eigen::VectorXd cmprsk, Eigen::VectorXd& gamma1, Eigen::VectorXd& gamma2, Rcpp::List alphaList, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Sig, Rcpp::List betaList);
RcppExport SEXP _FastJM_getMaGH(SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP, SEXP sigmaListSEXP, SEXP sigmaiListSEXP, SEXP weightSEXP, SEXP abscSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alphaListSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP SigSEXP, SEXP betaListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaList(sigmaListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type absc(abscSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alphaList(alphaListSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type betaList(betaListSEXP);
    rcpp_result_gen = Rcpp::wrap(getMaGH(XList, YList, ZList, W, mdata, mdataSList, bList, sigmaList, sigmaiList, weight, absc, H01, H02, survtime, cmprsk, gamma1, gamma2, alphaList, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02, Sig, betaList));
    return rcpp_result_gen;
END_RCPP
}
// getPus
Eigen::VectorXd getPus(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::VectorXd& survtime, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const double u);
RcppExport SEXP _FastJM_getPus(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP H01SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP survtimeSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(getPus(beta, gamma1, alpha1, Sig, sigma, H01, Z, X1, Y, X2, mdata, mdataS, survtime, xsmatrix, wsmatrix, u));
    return rcpp_result_gen;
END_RCPP
}
// getPusCR
Eigen::MatrixXd getPusCR(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::VectorXd& survtime, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const double u);
RcppExport SEXP _FastJM_getPusCR(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP survtimeSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(getPusCR(beta, gamma1, gamma2, alpha1, alpha2, Sig, sigma, H01, H02, Z, X1, Y, X2, mdata, mdataS, survtime, xsmatrix, wsmatrix, u));
    return rcpp_result_gen;
END_RCPP
}
// getfitted
Rcpp::List getfitted(const Eigen::VectorXd& beta, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getfitted(SEXP betaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getfitted(beta, Z, X1, Y, mdata, mdataS, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getfittedSurv
Eigen::MatrixXd getfittedSurv(const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::MatrixXd& X2, Eigen::MatrixXd& CH012, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getfittedSurv(SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP X2SEXP, SEXP CH012SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type CH012(CH012SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getfittedSurv(gamma1, gamma2, X2, CH012, alpha1, alpha2, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getfittedSurvSF
Eigen::MatrixXd getfittedSurvSF(const Eigen::VectorXd& gamma1, const Eigen::MatrixXd& X2, const Eigen::MatrixXd& CH01, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& FUNB);
RcppExport SEXP _FastJM_getfittedSurvSF(SEXP gamma1SEXP, SEXP X2SEXP, SEXP CH01SEXP, SEXP alpha1SEXP, SEXP FUNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type CH01(CH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type FUNB(FUNBSEXP);
    rcpp_result_gen = Rcpp::wrap(getfittedSurvSF(gamma1, X2, CH01, alpha1, FUNB));
    return rcpp_result_gen;
END_RCPP
}
// getloglikeCpseudo
double getloglikeCpseudo(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getloglikeCpseudo(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getloglikeCpseudo(beta, gamma1, gamma2, alpha1, alpha2, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getloglikeCpseudoSF
double getloglikeCpseudoSF(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& HAZ01, const Eigen::MatrixXd& Posbi, const Eigen::MatrixXd& Poscov);
RcppExport SEXP _FastJM_getloglikeCpseudoSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP, SEXP PosbiSEXP, SEXP PoscovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Posbi(PosbiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Poscov(PoscovSEXP);
    rcpp_result_gen = Rcpp::wrap(getloglikeCpseudoSF(beta, gamma1, alpha1, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, HAZ01, Posbi, Poscov));
    return rcpp_result_gen;
END_RCPP
}
// getloglikeCstandard
double getloglikeCstandard(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02);
RcppExport SEXP _FastJM_getloglikeCstandard(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    rcpp_result_gen = Rcpp::wrap(getloglikeCstandard(beta, gamma1, gamma2, alpha1, alpha2, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, CUH02, HAZ01, HAZ02));
    return rcpp_result_gen;
END_RCPP
}
// getloglikeCstandardSF
double getloglikeCstandardSF(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& Sig, const double sigma, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X1, const Eigen::VectorXd& Y, const Eigen::MatrixXd& X2, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, const Eigen::VectorXd& mdata, const Eigen::VectorXi& mdataS, const Eigen::MatrixXd& xsmatrix, const Eigen::MatrixXd& wsmatrix, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& HAZ01);
RcppExport SEXP _FastJM_getloglikeCstandardSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP SigSEXP, SEXP sigmaSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP YSEXP, SEXP X2SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSSEXP, SEXP xsmatrixSEXP, SEXP wsmatrixSEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type mdataS(mdataSSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xsmatrix(xsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type wsmatrix(wsmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    rcpp_result_gen = Rcpp::wrap(getloglikeCstandardSF(beta, gamma1, alpha1, Sig, sigma, Z, X1, Y, X2, survtime, cmprsk, mdata, mdataS, xsmatrix, wsmatrix, CUH01, HAZ01));
    return rcpp_result_gen;
END_RCPP
}
// getmvCov
Rcpp::List getmvCov(const Eigen::VectorXd beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& gamma2, const Eigen::VectorXd& alpha1, const Eigen::VectorXd& alpha2, const Eigen::MatrixXd& H01, const Eigen::MatrixXd& H02, Rcpp::List sigmaiList, const Eigen::MatrixXd& Sig, const Eigen::VectorXd sigmaVec, Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList);
RcppExport SEXP _FastJM_getmvCov(SEXP betaSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP sigmaiListSEXP, SEXP SigSEXP, SEXP sigmaVecSEXP, SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type sigmaVec(sigmaVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    rcpp_result_gen = Rcpp::wrap(getmvCov(beta, gamma1, gamma2, alpha1, alpha2, H01, H02, sigmaiList, Sig, sigmaVec, XList, YList, ZList, W, survtime, cmprsk, mdata, mdataSList, bList));
    return rcpp_result_gen;
END_RCPP
}
// getmvCovSF
Rcpp::List getmvCovSF(const Eigen::VectorXd beta, const Eigen::VectorXd& gamma1, const Eigen::VectorXd& alpha1, const Eigen::MatrixXd& H01, Rcpp::List sigmaiList, const Eigen::MatrixXd& Sig, const Eigen::VectorXd sigmaVec, Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, const Eigen::VectorXd& survtime, const Eigen::VectorXd& cmprsk, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList);
RcppExport SEXP _FastJM_getmvCovSF(SEXP betaSEXP, SEXP gamma1SEXP, SEXP alpha1SEXP, SEXP H01SEXP, SEXP sigmaiListSEXP, SEXP SigSEXP, SEXP sigmaVecSEXP, SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type sigmaVec(sigmaVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    rcpp_result_gen = Rcpp::wrap(getmvCovSF(beta, gamma1, alpha1, H01, sigmaiList, Sig, sigmaVec, XList, YList, ZList, W, survtime, cmprsk, mdata, mdataSList, bList));
    return rcpp_result_gen;
END_RCPP
}
// getQuadMix
Rcpp::List getQuadMix(Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList, Rcpp::List sigmaList, Rcpp::List sigmaiList, Eigen::VectorXd weight, Eigen::VectorXd absc, Eigen::MatrixXd H01, Eigen::MatrixXd H02, Eigen::VectorXd& survtime, Eigen::VectorXd cmprsk, Eigen::VectorXd& gamma1, Eigen::VectorXd& gamma2, Rcpp::List alphaList, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Sig, Rcpp::List betaList);
RcppExport SEXP _FastJM_getQuadMix(SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP, SEXP sigmaListSEXP, SEXP sigmaiListSEXP, SEXP weightSEXP, SEXP abscSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alphaListSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP SigSEXP, SEXP betaListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaList(sigmaListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type absc(abscSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alphaList(alphaListSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type betaList(betaListSEXP);
    rcpp_result_gen = Rcpp::wrap(getQuadMix(XList, YList, ZList, W, mdata, mdataSList, bList, sigmaList, sigmaiList, weight, absc, H01, H02, survtime, cmprsk, gamma1, gamma2, alphaList, CUH01, CUH02, HAZ01, HAZ02, Sig, betaList));
    return rcpp_result_gen;
END_RCPP
}
// normalApprox
Rcpp::List normalApprox(Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList, Eigen::VectorXd sigmaInit, Rcpp::List sigmaiList, Eigen::MatrixXd H01, Eigen::MatrixXd H02, Eigen::VectorXd& survtime, Eigen::VectorXd cmprsk, Eigen::VectorXd& gamma1, Eigen::VectorXd& gamma2, Rcpp::List alphaList, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& CUH02, const Eigen::VectorXd& HAZ01, const Eigen::VectorXd& HAZ02, const Eigen::MatrixXd& Sig, Rcpp::List betaList);
RcppExport SEXP _FastJM_normalApprox(SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP, SEXP sigmaInitSEXP, SEXP sigmaiListSEXP, SEXP H01SEXP, SEXP H02SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP alphaListSEXP, SEXP CUH01SEXP, SEXP CUH02SEXP, SEXP HAZ01SEXP, SEXP HAZ02SEXP, SEXP SigSEXP, SEXP betaListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigmaInit(sigmaInitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H02(H02SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alphaList(alphaListSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH02(CUH02SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ02(HAZ02SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type betaList(betaListSEXP);
    rcpp_result_gen = Rcpp::wrap(normalApprox(XList, YList, ZList, W, mdata, mdataSList, bList, sigmaInit, sigmaiList, H01, H02, survtime, cmprsk, gamma1, gamma2, alphaList, CUH01, CUH02, HAZ01, HAZ02, Sig, betaList));
    return rcpp_result_gen;
END_RCPP
}
// normalApproxSF
Rcpp::List normalApproxSF(Rcpp::List XList, Rcpp::List YList, Rcpp::List ZList, Eigen::MatrixXd& W, Rcpp::List mdata, Rcpp::List mdataSList, Rcpp::List bList, Eigen::VectorXd sigmaInit, Rcpp::List sigmaiList, Eigen::MatrixXd H01, Eigen::VectorXd& survtime, Eigen::VectorXd cmprsk, Eigen::VectorXd& gamma1, Rcpp::List alphaList, const Eigen::VectorXd& CUH01, const Eigen::VectorXd& HAZ01, const Eigen::MatrixXd& Sig, Rcpp::List betaList);
RcppExport SEXP _FastJM_normalApproxSF(SEXP XListSEXP, SEXP YListSEXP, SEXP ZListSEXP, SEXP WSEXP, SEXP mdataSEXP, SEXP mdataSListSEXP, SEXP bListSEXP, SEXP sigmaInitSEXP, SEXP sigmaiListSEXP, SEXP H01SEXP, SEXP survtimeSEXP, SEXP cmprskSEXP, SEXP gamma1SEXP, SEXP alphaListSEXP, SEXP CUH01SEXP, SEXP HAZ01SEXP, SEXP SigSEXP, SEXP betaListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ZList(ZListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdata(mdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mdataSList(mdataSListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bList(bListSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigmaInit(sigmaInitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmaiList(sigmaiListSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H01(H01SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type survtime(survtimeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cmprsk(cmprskSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alphaList(alphaListSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type CUH01(CUH01SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type HAZ01(HAZ01SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type betaList(betaListSEXP);
    rcpp_result_gen = Rcpp::wrap(normalApproxSF(XList, YList, ZList, W, mdata, mdataSList, bList, sigmaInit, sigmaiList, H01, survtime, cmprsk, gamma1, alphaList, CUH01, HAZ01, Sig, betaList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FastJM_GetrisksetC", (DL_FUNC) &_FastJM_GetrisksetC, 1},
    {"_FastJM_GetrisksetCSF", (DL_FUNC) &_FastJM_GetrisksetCSF, 1},
    {"_FastJM_MultVV", (DL_FUNC) &_FastJM_MultVV, 2},
    {"_FastJM_CumSum", (DL_FUNC) &_FastJM_CumSum, 1},
    {"_FastJM_MultVVoutprod", (DL_FUNC) &_FastJM_MultVVoutprod, 1},
    {"_FastJM_MultVV2outprod", (DL_FUNC) &_FastJM_MultVV2outprod, 2},
    {"_FastJM_MultVVinprod", (DL_FUNC) &_FastJM_MultVVinprod, 1},
    {"_FastJM_getdeterminant", (DL_FUNC) &_FastJM_getdeterminant, 1},
    {"_FastJM_CH", (DL_FUNC) &_FastJM_CH, 2},
    {"_FastJM_HAZ", (DL_FUNC) &_FastJM_HAZ, 2},
    {"_FastJM_MultMM", (DL_FUNC) &_FastJM_MultMM, 2},
    {"_FastJM_GetCIF1CR", (DL_FUNC) &_FastJM_GetCIF1CR, 10},
    {"_FastJM_GetCIF2CR", (DL_FUNC) &_FastJM_GetCIF2CR, 10},
    {"_FastJM_GetCIF1CRall", (DL_FUNC) &_FastJM_GetCIF1CRall, 10},
    {"_FastJM_GetCIF2CRall", (DL_FUNC) &_FastJM_GetCIF2CRall, 10},
    {"_FastJM_getBayes", (DL_FUNC) &_FastJM_getBayes, 8},
    {"_FastJM_getCov", (DL_FUNC) &_FastJM_getCov, 22},
    {"_FastJM_getCovSF", (DL_FUNC) &_FastJM_getCovSF, 19},
    {"_FastJM_getECIF", (DL_FUNC) &_FastJM_getECIF, 21},
    {"_FastJM_getECIFall", (DL_FUNC) &_FastJM_getECIFall, 22},
    {"_FastJM_getECpseudo", (DL_FUNC) &_FastJM_getECpseudo, 23},
    {"_FastJM_getECpseudoSF", (DL_FUNC) &_FastJM_getECpseudoSF, 19},
    {"_FastJM_getECstandard", (DL_FUNC) &_FastJM_getECstandard, 21},
    {"_FastJM_getECstandardSF", (DL_FUNC) &_FastJM_getECstandardSF, 17},
    {"_FastJM_getES", (DL_FUNC) &_FastJM_getES, 15},
    {"_FastJM_getHazard", (DL_FUNC) &_FastJM_getHazard, 10},
    {"_FastJM_getHazardSF", (DL_FUNC) &_FastJM_getHazardSF, 6},
    {"_FastJM_getMC", (DL_FUNC) &_FastJM_getMC, 22},
    {"_FastJM_getMCSF", (DL_FUNC) &_FastJM_getMCSF, 19},
    {"_FastJM_getMNA", (DL_FUNC) &_FastJM_getMNA, 26},
    {"_FastJM_getMaGH", (DL_FUNC) &_FastJM_getMaGH, 26},
    {"_FastJM_getPus", (DL_FUNC) &_FastJM_getPus, 16},
    {"_FastJM_getPusCR", (DL_FUNC) &_FastJM_getPusCR, 19},
    {"_FastJM_getfitted", (DL_FUNC) &_FastJM_getfitted, 7},
    {"_FastJM_getfittedSurv", (DL_FUNC) &_FastJM_getfittedSurv, 7},
    {"_FastJM_getfittedSurvSF", (DL_FUNC) &_FastJM_getfittedSurvSF, 5},
    {"_FastJM_getloglikeCpseudo", (DL_FUNC) &_FastJM_getloglikeCpseudo, 23},
    {"_FastJM_getloglikeCpseudoSF", (DL_FUNC) &_FastJM_getloglikeCpseudoSF, 19},
    {"_FastJM_getloglikeCstandard", (DL_FUNC) &_FastJM_getloglikeCstandard, 21},
    {"_FastJM_getloglikeCstandardSF", (DL_FUNC) &_FastJM_getloglikeCstandardSF, 17},
    {"_FastJM_getmvCov", (DL_FUNC) &_FastJM_getmvCov, 19},
    {"_FastJM_getmvCovSF", (DL_FUNC) &_FastJM_getmvCovSF, 16},
    {"_FastJM_getQuadMix", (DL_FUNC) &_FastJM_getQuadMix, 24},
    {"_FastJM_normalApprox", (DL_FUNC) &_FastJM_normalApprox, 22},
    {"_FastJM_normalApproxSF", (DL_FUNC) &_FastJM_normalApproxSF, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_FastJM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
